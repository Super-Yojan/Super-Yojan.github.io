<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>UMDCTF on drMoscovium Blog</title>
    <link>//localhost:1313/tags/umdctf/</link>
    <description>Recent content in UMDCTF on drMoscovium Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>yojan.gautam@outlook.com (Yojan Gautam)</managingEditor>
    <webMaster>yojan.gautam@outlook.com (Yojan Gautam)</webMaster>
    <lastBuildDate>Sun, 06 Mar 2022 19:12:41 -0500</lastBuildDate><atom:link href="//localhost:1313/tags/umdctf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>UMDCTF: Block ChainV2 - Chungus Coin</title>
      <link>//localhost:1313/posts/writeups/umdctf/blockchainchunguscoin/</link>
      <pubDate>Sun, 06 Mar 2022 19:12:41 -0500</pubDate>
      <author>yojan.gautam@outlook.com (Yojan Gautam)</author>
      <guid>//localhost:1313/posts/writeups/umdctf/blockchainchunguscoin/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/UMDCTF/ChungusCoin/Pasted%20image%2020220306151519.png&#34; alt=&#34;&#34;&gt;
For this challenge we were provided with the server.py with stuffs redacted.&lt;/p&gt;
&lt;p&gt;They made their own coin called ChungusCoin, this challenge was combination of reverse engineering and bitcoin.&lt;/p&gt;
&lt;p&gt;As usual, starting the challenge out by analyzing the code that was provided.
&lt;img src=&#34;//localhost:1313/UMDCTF/ChungusCoin/Pasted%20image%2020220306151923.png&#34; alt=&#34;&#34;&gt;
There is a lot going in the code. The description of the challenge says it&amp;rsquo;s for people who know how to mine. So, time to figure out how to mine this code.&lt;/p&gt;
&lt;p&gt;There are few routes in the flask servers
&lt;img src=&#34;//localhost:1313/UMDCTF/ChungusCoin/Pasted%20image%2020220306152435.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/UMDCTF/ChungusCoin/Pasted%20image%2020220306152509.png&#34; alt=&#34;&#34;&gt;
&lt;img src=&#34;//localhost:1313/UMDCTF/ChungusCoin/Pasted%20image%2020220306152553.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;I think for this challenge we have to compute hash of previous block, do some proof of work, then add the pending transaction to the chain. This will then return the flag.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; hashlib &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sha256
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; json
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; random
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;URL &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://0.cloud.chals.io:24797/&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pending_transactions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(URL&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pending_transactions&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;json()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;chain &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(URL&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chain&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;json()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;last_block &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; chain[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;chain&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;proof_of_work&lt;/span&gt;(prev_proof):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    new_proof &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randrange(&lt;span style=&#34;color:#ae81ff&#34;&gt;100000&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;9999999&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    proof_hash &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sha256(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;prev_proof&lt;span style=&#34;color:#e6db74&#34;&gt;}{&lt;/span&gt;new_proof&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode())&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hexdigest()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; proof_hash[:&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;00000&amp;#34;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        new_proof &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randrange(&lt;span style=&#34;color:#ae81ff&#34;&gt;100000&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;9999999&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        proof_hash &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sha256(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;prev_proof&lt;span style=&#34;color:#e6db74&#34;&gt;}{&lt;/span&gt;new_proof&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode())&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hexdigest()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(new_proof, proof_hash)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(new_proof, proof_hash)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; new_proof
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;new_block&lt;/span&gt;(last_block):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    new_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; last_block[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;index&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    prev_hash &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sha256(json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dumps(last_block, sort_keys&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode())&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hexdigest()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    new_proof &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proof_of_work(last_block[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;proof&amp;#39;&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    time_stamp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.7976931348623157e+308&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dict &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;index&amp;#34;&lt;/span&gt; : new_index,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;previous_hash&amp;#34;&lt;/span&gt;: prev_hash,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;proof&amp;#34;&lt;/span&gt;: new_proof,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;timestamp&amp;#34;&lt;/span&gt; : time_stamp,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;transactions&amp;#34;&lt;/span&gt; : pending_transactions
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dict
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;update_chain&lt;/span&gt;(new_block):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    chain[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;chain&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(new_block)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    chain[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;length&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;length&amp;#39;&lt;/span&gt;:chain[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;length&amp;#39;&lt;/span&gt;],&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;chain&amp;#39;&lt;/span&gt;:chain[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;chain&amp;#39;&lt;/span&gt;], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;drMoscovium&amp;#39;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;post(url&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;URL&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nodes/update&amp;#34;&lt;/span&gt;,json&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;data )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(resp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;json())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;block &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; new_block(last_block)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;update_chain(block)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Script for mining
Explaining everything will take forever, here is a quick overview:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;proof_of_work:&lt;/strong&gt;&lt;/em&gt; it takes in previous proof and computes new hash with first 5 hash being 0, by appending new randomly generated 6-7 numbers
&lt;em&gt;&lt;strong&gt;new_block&lt;/strong&gt;&lt;/em&gt;: it creates a new block by hashing previous block, adding one to the index, and getting the proof of work from the proof_of_work function.
&lt;em&gt;&lt;strong&gt;update_chain&lt;/strong&gt;&lt;/em&gt;: it takes in new_block and appends it to the chain, and send a post request to update the chain in the block chain server.&lt;/p&gt;
&lt;p&gt;Running the script will compute proof_of_work and append the transaction to server and return the flag.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/UMDCTF/ChungusCoin/Solver.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;UMDCTF&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;Chungus_Th4nk5_y0u_f0r_y0ur_bl0ckch41n_s3rv!c3&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>UMDCTF: Customer Support</title>
      <link>//localhost:1313/posts/writeups/umdctf/customersupport/</link>
      <pubDate>Sun, 06 Mar 2022 19:09:57 -0500</pubDate>
      <author>yojan.gautam@outlook.com (Yojan Gautam)</author>
      <guid>//localhost:1313/posts/writeups/umdctf/customersupport/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/UMDCTF/CustomerSupport/Pasted%20image%2020220306144115.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;For this challenge we were given
&lt;img src=&#34;//localhost:1313/UMDCTF/CustomerSupport/Pasted%20image%2020220306144230.png&#34; alt=&#34;&#34;&gt;
So I stared out by opening the Dockerfile
&lt;img src=&#34;//localhost:1313/UMDCTF/CustomerSupport/Pasted%20image%2020220306144325.png&#34; alt=&#34;&#34;&gt;
In the docker file we can see the starting command is &lt;code&gt;npm run startall&lt;/code&gt;
&lt;img src=&#34;//localhost:1313/UMDCTF/CustomerSupport/Pasted%20image%2020220306144449.png&#34; alt=&#34;&#34;&gt;
Looking at the package.json we can see two service being started with start all script.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/UMDCTF/CustomerSupport/Pasted%20image%2020220306144621.png&#34; alt=&#34;&#34;&gt;
In app.js inside microservice we can see two path that returns token.
&lt;img src=&#34;//localhost:1313/UMDCTF/CustomerSupport/Pasted%20image%2020220306144728.png&#34; alt=&#34;&#34;&gt;
This microservice is running in port 3001. The first thing that I tried to do was open that port, but i couldn&amp;rsquo;t access it.
&lt;em&gt;Time for more code analysis&lt;/em&gt;
&lt;img src=&#34;//localhost:1313/UMDCTF/CustomerSupport/Pasted%20image%2020220306145052.png&#34; alt=&#34;&#34;&gt;
Here I can see that there&amp;rsquo;s some request being sent, and it&amp;rsquo;s using our input to send the request.
&lt;img src=&#34;//localhost:1313/UMDCTF/CustomerSupport/Pasted%20image%2020220306145540.png&#34; alt=&#34;&#34;&gt;
There is a filter that checks for any &amp;rsquo;localhost&amp;rsquo;, &amp;lsquo;127.0.0.1&amp;rsquo; or &amp;lsquo;0.0.0.0&amp;rsquo; in the message body. All we need to do now is figure out a way to access localhost using something that&amp;rsquo;s not filtered. In this case we can use &lt;code&gt;::1/28&lt;/code&gt;, so if we try to access &lt;code&gt;http://::1/28/auth&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -X POST https://customer-support-p558t.ondigitalocean.app/api/contact -H &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Content-Type: application/json&amp;#39;&lt;/span&gt; -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#34;name&amp;#34;:&amp;#34;ts&amp;#34;,&amp;#34;email&amp;#34;:&amp;#34;test@test.com&amp;#34;,&amp;#34;subject&amp;#34;:&amp;#34;test&amp;#34;,&amp;#34;message&amp;#34;:&amp;#34;http://::1/28/auth&amp;#34;}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;//localhost:1313/UMDCTF/CustomerSupport/Pasted%20image%2020220306150537.png&#34; alt=&#34;&#34;&gt;
This will return a token.&lt;/p&gt;
&lt;p&gt;What can we do with the token?
&lt;img src=&#34;//localhost:1313/UMDCTF/CustomerSupport/Pasted%20image%2020220306150617.png&#34; alt=&#34;&#34;&gt;
there&amp;rsquo;s an api that will take the token and return the flag.
We need to pass the token in cookie Authorization.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl --cookie &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Authorization=Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlVNRENURiIsImIiOiJUb2RheSBJIHdpbGwgbGl2ZSBpbiB0aGUgbW9tZW50LCB1bmxlc3MgaXQgaXMgdW5wbGVhc2FudCwgaW4gd2hpY2ggY2FzZSwgSSB3aWxsIGVhdCIsImlhdCI6MTcxNjIzOTAyMn0.7SoLIpd9dL9d3Lx84vbAqlLCE5rR3fWqN8ZWLx41QDE&amp;#39;&lt;/span&gt; https://customer-support-p558t.ondigitalocean.app/api/auth
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;//localhost:1313/UMDCTF/CustomerSupport/Pasted%20image%2020220306151214.png&#34; alt=&#34;&#34;&gt;
This gives me the flag&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;UMDCTF{I_b3t_th@t_c00kie_t4sted_g00d_d!dnt_it!U4L_p4rs1ng_suck5}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>
